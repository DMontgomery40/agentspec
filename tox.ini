# Tox configuration for testing agentspec across multiple Python versions
#
# Usage:
#   tox              # Run all environments
#   tox -e py310     # Test only Python 3.10
#   tox -e py311     # Test only Python 3.11
#   tox -list        # List all test environments

[tox]
# Test Python 3.9 (expected to fail), 3.10 (minimum), 3.11, 3.12
envlist = py39, py310, py311, py312
skip_missing_interpreters = True
isolated_build = True

[testenv]
# Install package with all optional dependencies for comprehensive testing
deps = 
    pytest>=7.0.0
    pytest-cov
extras = all

# Run tests with coverage
commands = 
    # Show Python version being tested
    python --version
    
    # Run basic import test
    python -c "import agentspec; print('✓ Import successful')"
    
    # Run pytest suite
    pytest tests/ -v --tb=short
    
    # Test CLI commands (without API calls)
    agentspec --help
    agentspec lint --help
    agentspec extract --help
    agentspec generate --help

# Allow passing additional pytest args via command line
# Example: tox -- -k test_specific_function
passenv = 
    HOME
    USER
    CI
    PYTHONPATH

[testenv:py39]
# Python 3.9 - Expected to FAIL due to PEP 604 union types (str | None)
description = Test with Python 3.9 (expected: syntax errors)

[testenv:py310]
# Python 3.10 - Should be the MINIMUM supported version
description = Test with Python 3.10 (minimum supported version)

[testenv:py311]
# Python 3.11 - Current development version
description = Test with Python 3.11 (current development version)

[testenv:py312]
# Python 3.12 - Latest stable version
description = Test with Python 3.12 (latest stable)

[testenv:rich-format-test]
# Specific test environment for Rich formatting issues
description = Test Rich text formatting in CLI
basepython = python3.10
deps =
    {[testenv]deps}
commands =
    python --version
    python -c "from agentspec.cli import _show_rich_help; _show_rich_help()"
    agentspec --help
    agentspec lint --help

[testenv:generate-test]
# Specific test environment for generate.py functionality  
description = Test generate module with union type annotations
basepython = python3.10
deps =
    {[testenv]deps}
commands =
    python --version
    python -c "from agentspec.generate import extract_function_info, generate_docstring; print('✓ Generate module imports successful')"
    python -c "from agentspec.utils import _find_git_root, _find_agentspecignore; print('✓ Utils module imports successful')"

[testenv:lint]
# Code quality checks
description = Run linters and code quality tools
skip_install = True
deps =
    ruff
    mypy
commands =
    ruff check agentspec/
    # mypy agentspec/ --ignore-missing-imports

[testenv:coverage]
# Generate coverage report
description = Generate test coverage report
deps =
    {[testenv]deps}
    coverage[toml]
commands =
    coverage run -m pytest tests/
    coverage report -m
    coverage html

